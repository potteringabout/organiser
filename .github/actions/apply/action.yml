name: Terraform Deployment
description: Deploys terraform workflows to environment
inputs:
  ENVIRONMENT_NAME:
    description: "Environment Name"
    required: true
  AWS_REGION:
    description: "AWS region"
    required: true
  ROLE_DURATION_SECONDS:
    description: "Role duration"
    required: false
  ROLE_SESSION_NAME:
    description: "Role session name"
    required: false
  TF_STATE_BUCKET:
    description: "AWS S3 bucket for Terraform state"
    required: true
  TF_DYNAMO_TABLE:
    description: "AWS DynamoDB table for Terraform lock file"
    required: true
  TF_VERSION:
    description: "Terraform version"
    required: false
    default: latest
  IDENTITY_ROLE:
    description: "Role for Aws"
    required: true
  WORKING_DIRECTORY:
    description: Working directory
    required: true
  EXTRA_ARGS:
    description: Extra arguments
    required: false


runs:
  using: "composite"
  steps:
    # Set up AWS cli
    - name: AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.AWS_REGION }}
        role-to-assume: ${{ inputs.IDENTITY_ROLE }}
        role-duration-seconds: ${{ inputs.ROLE_DURATION_SECONDS }}
        role-session-name: ${{ inputs.ROLE_SESSION_NAME }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
       terraform_version: ${{ inputs.TF_VERSION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        cd ${{ inputs.WORKING_DIRECTORY }}
        terraform init \
          -backend-config="region=${{ inputs.AWS_REGION }}" \
          -backend-config="bucket=${{ inputs.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ github.repository }}/${{ inputs.ENVIRONMENT_NAME }}/terraform.tfstate" \
          -backend-config="dynamodb_table=${{ inputs.TF_DYNAMO_TABLE }}" \
          -backend-config="encrypt=true"
      shell: bash

    # Validate terraform
    - name: Terraform Validate
      id: validate
      run: |
        cd ${{ inputs.WORKING_DIRECTORY }}
        terraform validate
      shell: bash

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: |
        cd ${{ inputs.WORKING_DIRECTORY }}
        terraform fmt -check
      shell: bash

    # Apply changes to environment
    - name: Terraform Apply
      id: apply
      run: |
        cd ${{ inputs.WORKING_DIRECTORY }}
        terraform apply ${{ inputs.EXTRA_ARGS }} -var-file="./variables/input.tfvars.json" -var "deployment_repo=${{ github.repositoryUrl }}" -auto-approve
      shell: bash

    - name: Show Terraform Output
      id: output
      run: |
        cd ${{ inputs.WORKING_DIRECTORY }}
        terraform output
      shell: bash