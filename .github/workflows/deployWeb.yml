name: Deploy to S3 + CloudFront

on:
  #push:
  #  branches: [main]

  workflow_dispatch:
    #checkov:skip=CKV_GHA_7:Deliberately added input parameters for specfic deployments
    inputs:
      ENVIRONMENT_NAME:
        description: "Environment where the contnet will be deployed to"
        required: true
        type: environment


permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci -legacy-peer-deps
        working-directory: web

      - name: Build
        run: npm run build
        working-directory: web

      - name: Get config
        id: get-vars
        shell: bash
        run: |
          deployment_role_arn=$(echo '${{ vars.CONFIG }}' | jq -r '.deployment_role_arn')
          echo "deployment_role_arn=$deployment_role_arn" >> $GITHUB_OUTPUT
          environment=$(echo '${{ vars.CONFIG }}' | jq -r '.environment')
          echo "environment=$environment" >> $GITHUB_OUTPUT
          project=$(echo '${{ vars.CONFIG }}' | jq -r '.project')
          echo "project=$project" >> $GITHUB_OUTPUT
          
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IDENTITY_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Assume deployer role in target account
        id: assume-role
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn ${{ steps.get-vars.outputs.deployment_role_arn }} \
            --role-session-name github-deploy \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | cut -d ' ' -f1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | cut -d ' ' -f2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | cut -d ' ' -f3)" >> $GITHUB_ENV


      - name: Get SSM Parameters
        id: get-params
        run: |
          bucket_name=$(aws ssm get-parameter --name "/${{ steps.get-vars.outputs.project }}/${{ steps.get-vars.outputs.environment }}/static-content-bucket" --with-decryption --query "Parameter.Value" --output text)
          cloudfront_distribution_id=$(aws ssm get-parameter --name "/${{ steps.get-vars.outputs.project }}/${{ steps.get-vars.outputs.environment }}/cloudfront-distribution-id" --with-decryption --query "Parameter.Value" --output text)
      
          echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$cloudfront_distribution_id" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        run: |
          aws s3 sync web/dist/ s3://${{ steps.get-params.outputs.bucket_name }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-params.outputs.cloudfront_distribution_id }} \
            --paths "/*"