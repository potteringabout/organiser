{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/auth.js"],"sourcesContent":["import { CognitoUserPool, CognitoUser, AuthenticationDetails } from 'amazon-cognito-identity-js';\nimport { jwtDecode } from 'jwt-decode'; // You'll need to install jwt-decode package\n\nconst poolData = {\n    UserPoolId: 'eu-west-2_Qv91VSnrS',\n    ClientId: '533mf4s6jof94htjam2dut05hd'\n};\n\nconst userPool = new CognitoUserPool(poolData);\n\nexport function signIn(username, password) {\n    const authenticationDetails = new AuthenticationDetails({\n        Username: username,\n        Password: password,\n    });\n\n    const userData = {\n        Username: username,\n        Pool: userPool\n    };\n\n    const cognitoUser = new CognitoUser(userData);\n\n    return new Promise((resolve, reject) => {\n        cognitoUser.authenticateUser(authenticationDetails, {\n            onSuccess: result => {\n                const idToken = result.getIdToken().getJwtToken();\n                sessionStorage.setItem('idToken', idToken);\n                sessionStorage.setItem('name', username);\n                resolve(result);\n            },\n            onFailure: err => reject(err)\n        });\n    });\n}\n\nexport function signOut() {\n    sessionStorage.removeItem('idToken')\n    sessionStorage.removeItem('name');\n    const currentUser = userPool.getCurrentUser();\n    if (currentUser) {\n        currentUser.signOut();\n    }\n}\n\nexport function isSignedIn() {\n    const idToken = sessionStorage.getItem('idToken');\n    if (!idToken) {\n        return false;\n    }\n\n    try {\n        const decoded = jwtDecode(idToken);\n        const currentTime = Math.floor(Date.now() / 1000);\n        return decoded.exp > currentTime;\n    } catch (error) {\n        console.error('Invalid token', error);\n        return false;\n    }\n}\n\nexport function getIdToken() {\n    return sessionStorage.getItem('idToken');\n}\n\nexport function getUsername() {\n    return sessionStorage.getItem('name');\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AACA,qQAAwC,4CAA4C;AADpF;AAAA;AAAA;;;AAGA,MAAM,WAAW;IACb,YAAY;IACZ,UAAU;AACd;AAEA,MAAM,WAAW,IAAI,0NAAA,CAAA,kBAAe,CAAC;AAE9B,SAAS,OAAO,QAAQ,EAAE,QAAQ;IACrC,MAAM,wBAAwB,IAAI,sOAAA,CAAA,wBAAqB,CAAC;QACpD,UAAU;QACV,UAAU;IACd;IAEA,MAAM,WAAW;QACb,UAAU;QACV,MAAM;IACV;IAEA,MAAM,cAAc,IAAI,kNAAA,CAAA,cAAW,CAAC;IAEpC,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,YAAY,gBAAgB,CAAC,uBAAuB;YAChD,WAAW,CAAA;gBACP,MAAM,UAAU,OAAO,UAAU,GAAG,WAAW;gBAC/C,eAAe,OAAO,CAAC,WAAW;gBAClC,eAAe,OAAO,CAAC,QAAQ;gBAC/B,QAAQ;YACZ;YACA,WAAW,CAAA,MAAO,OAAO;QAC7B;IACJ;AACJ;AAEO,SAAS;IACZ,eAAe,UAAU,CAAC;IAC1B,eAAe,UAAU,CAAC;IAC1B,MAAM,cAAc,SAAS,cAAc;IAC3C,IAAI,aAAa;QACb,YAAY,OAAO;IACvB;AACJ;AAEO,SAAS;IACZ,MAAM,UAAU,eAAe,OAAO,CAAC;IACvC,IAAI,CAAC,SAAS;QACV,OAAO;IACX;IAEA,IAAI;QACA,MAAM,UAAU,CAAA,GAAA,sJAAA,CAAA,YAAS,AAAD,EAAE;QAC1B,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;QAC5C,OAAO,QAAQ,GAAG,GAAG;IACzB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO;IACX;AACJ;AAEO,SAAS;IACZ,OAAO,eAAe,OAAO,CAAC;AAClC;AAEO,SAAS;IACZ,OAAO,eAAe,OAAO,CAAC;AAClC"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { isSignedIn } from './app/auth';\n\nexport function middleware(request) {\n  console.log(\"Middleware\");\n  if (!isSignedIn()){// Replace with your authentication logic\n    console.log(\"Not signed in\");\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n  console.log(\"Signed in\");\n  return NextResponse.next();\n}\n\n// Specify which paths the middleware should apply to\nexport const config = {\n  matcher: ['/((?!login).*)']\n};"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGO,SAAS,WAAW,OAAO;IAChC,QAAQ,GAAG,CAAC;IACZ,IAAI,CAAC,CAAA,GAAA,2GAAA,CAAA,aAAU,AAAD,KAAI;QAChB,QAAQ,GAAG,CAAC;QACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IACA,QAAQ,GAAG,CAAC;IACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAiB;AAC7B"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}